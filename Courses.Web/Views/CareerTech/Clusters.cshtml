@model string

@{
    ViewBag.Title = "Clusters";
}
<style>
    [v-cloak] {
        display: none;
    }
</style>

@Html.Partial("_CareerTechNav")

<div id="app" v-cloak>

    <div class="card">
        <div class="card-header">
            <span class="card-title font-weight-bolder">Career Tech Clusters</span>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-6">

                    <div class="card border-secondary mb-3">
                        <div class="card-header">Clusters</div>
                        <div class="card-body text-secondary">
                            <h5 class="card-title"><small>Select Cluster</small></h5>

                            <div class="form-group row">
                                <div class="col-12">
                                    <select class="form-control"
                                            v-model="selectedCluster"
                                            v-on:change="onChange()"
                                            name="cluster"
                                            id="cluster"
                                            :disabled="clusters.length == 0">
                                        <option :value="null">-- Select A Cluster --</option>
                                        <option v-for="item in clusters" :value="item"
                                                :selected="item.clusterCode == clusterCode">
                                            {{ item.name }} ({{ item.clusterCode }})
                                        </option>
                                    </select>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>

            <div class="row" v-if="cluster">
                <div class="col-6">

                    <div class="card border-secondary mb-3"
                         v-bind:class="{'border-danger':errors.any()}">
                        <div class="card-header">Details</div>
                        <div class="card-body text-secondary">

                            <form novalidate v-on:submit.prevent="submit()" v-if="cluster">

                                <div class="form-group row">
                                    <label for="clusterCode" class="col-3 col-form-label">Cluster Code</label>
                                    <div class="col-md-9">
                                        <input type="text"
                                               class="form-control"
                                               id="clusterCode"
                                               name="clusterCode"
                                               placeholder="Cluster Code (required)"
                                               autocomplete="false"
                                               v-model.trim="cluster.clusterCode"
                                               v-validate.continues="'required|min:3|max:3'"
                                               data-vv-as="Cluster Code" />
                                        <small v-if="errors.has('clusterCode')" class="text-danger">{{ errors.first('clusterCode') }}</small>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <label for="clusterName" class="col-3 col-form-label">Name</label>
                                    <div class="col-9">
                                        <input type="text"
                                               class="form-control"
                                               id="clusterName"
                                               name="clusterName"
                                               placeholder="Cluster Name (required)"
                                               autocomplete="false"
                                               v-model.trim="cluster.name"
                                               v-validate.continues="'required'"
                                               data-vv-as="Cluster Name" />
                                        <small v-if="errors.has('clusterName')" class="text-danger">{{ errors.first('clusterName') }}</small>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <label for="clusterTypeId" class="col-3 col-form-label">Cluster Type</label>
                                    <div class="col-9">
                                        <select class="form-control"
                                                v-model="cluster.clusterTypeId"
                                                name="clusterTypeId"
                                                id="clusterTypeId"
                                                v-validate.continues="'required'"
                                                data-vv-as="Cluster Type">
                                            <option :value="null">-- Select Cluster Type --</option>
                                            <option v-for="type in clusterTypes" :value="type.id">{{ type.name }}</option>
                                        </select>
                                        <small v-if="errors.has('clusterTypeId')" class="text-danger">{{ errors.first('clusterTypeId') }}</small>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <div class="col-6">
                                        <label for="beginYear" class="col-form-label">Beginning Service Year</label>
                                        <select class="form-control"
                                                v-model="cluster.beginYear"
                                                name="beginYear"
                                                id="beginYear"
                                                v-validate="'required'"
                                                data-vv-as="Beginning Service Year"
                                                ref="beginYear">
                                            <option :value="null">-- Select Year --</option>
                                            <option v-for="year in schoolYears" :value="year.id">{{ year.year }}</option>
                                        </select>
                                        <small v-if="errors.has('beginYear')" class="text-danger">{{ errors.first('beginYear') }}</small>
                                    </div>
                                    <div class="col-6">
                                        <label for="endYear" class="col-form-label">Ending Service Year</label>
                                        <select class="form-control"
                                                v-model="cluster.endYear"
                                                name="endYear"
                                                id="endYear"
                                                v-validate="'greaterThan:beginYear'"
                                                data-vv-as="End Service Year">
                                            <option :value="null">-- Select Year --</option>
                                            <option v-for="year in schoolYears" :value="year.id">{{ year.year }}</option>
                                        </select>
                                        <small v-if="errors.has('endYear')" class="text-danger">{{ errors.first('endYear') }}</small>

                                    </div>

                                </div>

                                <button class="btn btn-primary" :disabled="errors.any() || !isFormDirty" type="submit">Save Cluster</button>
                                <button class="btn btn-outline-secondary" 
                                        
                                        v-on:click="cancel"
                                        v-if="isFormDirty"
                                        type="button">Cancel</button>
                            </form>

                        </div>
                    </div>

                </div>

                <div class="col-6">
                    <div class="card border-secondary mb-3">
                        <div class="card-header">Programs</div>
                        <div class="card-body text-secondary">

                            <div class="row">
                                <div class="col-12">
                                    <p>

                                        <div v-if="programs.length === 0">
                                            No programs assigned
                                        </div>


                                        <ul class="list-group" v-if="programs.length > 0">
                                            <li class="list-group-item" v-for="program in programs">
                                                <div class="text-muted">Cluster: {{ program.clusterName}}</div>
                                                <div class="font-weight-bolder">
                                                    <span>

                                                        <a v-bind:href="'/careertech/programs/'+ program.programCode">
                                                            {{ program.programName }} ({{ program.programCode }})
                                                        </a>
                                                    </span>
                                                </div>
                                            </li>
                                        </ul>
                                    </p>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

</div>

@section scripts{
    <script>
        var careerTechUrl = '/api/careertech/';
        var courseUrl = '/api/courses/';
        var refUrl = '/api/ref/';
        var urlParam = '@Model' ? '@Model' : null;

        Vue.use(VeeValidate,
            {
                classes: true,
                classNames: {
                    valid: 'is-valid',
                    invalid: 'is-invalid'
                }
            });

        var app = new Vue({
            el: '#app',
            data: {
                clusterCode: null,
                selectedCluster: null,
                cluster: null,
                cachedCluster: null,
                clusters: [],
                schoolYears: [],
                clusterTypes: [],
                programs: []
            },
            watch: {
            },
            methods: {
                submit: function(e) {
                    axios.put(careerTechUrl + 'clusters', this.cluster)
                        .then(resp => {
                            this.selectedCluster.name = this.cluster.name;
                            this.selectedCluster.clusterCode = this.cluster.clusterCode;
                        });
                },

                onChange: function(e) {
                    if (this.selectedCluster !== null) {
                        this.getCluster(this.selectedCluster.clusterCode);
                    } else {
                        this.cluster = null;
                    }
                },

                cancel: function() {
                    this.cluster = Object.assign({}, this.cachedCluster);
                    this.$validator.reset();
                },

                getCluster(clusterCode) {
                    var url = careerTechUrl + 'clusters/' + clusterCode;
                    this.cluster = {};

                    axios.get(url + '/edit').then(resp => {
                            this.cluster = resp.data;

                            this.$validator.reset();
                            this.cachedCluster = Object.assign({}, resp.data);

                        }).then(resp => {
                            axios.get(url + '/programs').then(resp => {
                                this.programs = resp.data;
                            }).catch(err => console.log(err));
                        })
                        .catch(err => console.log(err));
                },
            },
            computed: {
                isFormDirty() {
                    return Object.keys(this.fields).some(key => this.fields[key].dirty);
                }
            },
            created() {
                axios.get(refUrl + 'schoolyears').then(resp => {
                    this.schoolYears = resp.data;
                }).catch(err => console.log(err));

                axios.get(refUrl + 'clustertypes').then(resp => {
                    this.clusterTypes = resp.data;
                }).catch(err => console.log(err));

                axios.get(refUrl + 'clusters').then(resp => {
                    this.clusters = resp.data;
                }).then(() => {
                    if (urlParam !== null) {
                        this.selectedCluster = this.clusters.find(x => x.clusterCode === urlParam);
                        this.getCluster(urlParam);
                    }
                }).catch(err => console.log(err));

                this.$validator.extend('greaterThan',
                    (value, otherValue) => {
                        return value >= otherValue;
                    },
                    {
                        hasTarget: true
                    });

                //Custom Validator
                //this.$validator.extend('greaterThan',
                //    (value, otherValue) => {

                //        //var valueObj = this.schoolYears.find(x => x.id == value);
                //        //var otherObj = this.schoolYears.find(x => x.id == otherValue);
                //        //if (valueObj !== undefined && otherObj !== undefined) {
                //        //    return valueObj.year > otherObj.year;
                //        //}
                //        //return true;
                //    },
                //    {
                //        hasTarget: true
                //    });


            },
            updated() {
            },
            beforeMount() {
            },
            mounted() {
            }
        });
    </script>
}

