@model string
@{
    ViewBag.Title = "Credentials";
}

<style>
    [v-cloak] {
        display: none;
    }
</style>

@Html.Partial("_CareerTechNav")

<div id="app" v-cloak>

    <div class="card">
        <div class="card-header">
            <span class="card-title font-weight-bolder">Career Tech Credentials</span>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-6">

                    <div class="card border-secondary mb-3">
                        <div class="card-header">Credentials</div>
                        <div class="card-body text-secondary">
                            <h5 class="card-title"><small>Select Credential</small></h5>

                            <div class="form-group row">
                                <div class="col-md-12">
                                    <select class="form-control"
                                            v-model="selectedCredential"
                                            v-on:change="onChange($event)"
                                            name="selectedCredential" id="selectedCredential"
                                            :disabled="credentials.length == 0">
                                        <option :value="null">-- Select --</option>
                                        <option v-for="item in credentials" :value="item">{{ item.name }} ({{ item.credentialCode }})</option>
                                    </select>

                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>

            <div class="row" v-if="!credential && urlParam !== null">
                <div class="col-6">

                    <div class="card border-secondary mb-3"
                         v-bind:class="{'border-danger':errors.any()}"
                         v-if="!credential">
                        <div class="card-header">Not Found</div>

                        <div class="card-body text-secondary">
                            <h4>Unable to find credential {{this.urlParam}}</h4>
                            <h5 class="card-title"><small>Choose a Credential from the selection list above.</small></h5>
                        </div>

                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-6">
                    <div class="card border-secondary mb-3"
                         v-bind:class="{'border-danger':errors.any()}"
                         v-if="credential">
                        <div class="card-header">Details</div>
                        <div class="card-body text-secondary">

                            <form novalidate v-on:submit.prevent="submit()" v-if="credential">

                                <div class="form-group row">
                                    <label for="credentialCode" class="col-3 col-form-label">Credential Code</label>
                                    <div class="col-9">
                                        <input type="text"
                                               class="form-control"
                                               id="credentialCode"
                                               name="credentialCode"
                                               placeholder="Credential Code (required)"
                                               v-model.trim="credential.credentialCode"
                                               v-validate.continues="'required|min:4|max:4'"
                                               data-vv-as="Credential Code" />
                                        <small v-if="errors.has('credentialCode')" class="text-danger">{{ errors.first('credentialCode') }}</small>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label for="credentialName" class="col-3 col-form-label">Name</label>
                                    <div class="col-9">
                                        <input type="text"
                                               class="form-control"
                                               id="credentialName"
                                               name="credentialName"
                                               placeholder="Credential Name (required)"
                                               v-model.trim="credential.name"
                                               v-validate.continues="'required|max:200'"
                                               data-vv-as="Credential Name" />
                                        <small v-if="errors.has('credentialName')" class="text-danger">{{ errors.first('credentialName') }}</small>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <label for="credentialTypeId" class="col-3 col-form-label">Credential Type</label>
                                    <div class="col-9">
                                        <select class="form-control"
                                                v-model="credential.credentialTypeId"
                                                name="credentialTypeId"
                                                id="credentialTypeId"
                                                v-validate="'required'"
                                                data-vv-as="Credential Type">
                                            <option :value="null">-- Select Credential Type --</option>
                                            <option v-for="type in credentialTypes" :value="type.id">{{ type.name }}</option>
                                        </select>
                                        <small v-if="errors.has('credentialTypeId')" class="text-danger">{{ errors.first('credentialTypeId') }}</small>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <label for="beginYear" class="col-3 col-form-label">Begin Year</label>
                                    <div class="col-9">
                                        <select class="form-control"
                                                v-model="credential.beginYear"
                                                name="beginYear"
                                                id="beginYear"
                                                v-validate="'required'"
                                                data-vv-as="Begin Year"
                                                ref="beginYear">
                                            <option :value="null">-- Select Year --</option>
                                            <option v-for="year in schoolYears" :value="year.year">{{ year.year }}</option>
                                        </select>
                                        <small v-if="errors.has('beginYear')" class="text-danger">{{ errors.first('beginYear') }}</small>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <label for="endYear" class="col-3 col-form-label">End Year</label>
                                    <div class="col-9">
                                        <select class="form-control"
                                                v-model="credential.endYear"
                                                name="endYear"
                                                id="endYear"
                                                v-validate="'greaterThan:beginYear'"
                                                data-vv-as="End Year">
                                            <option :value="null">-- Select Year --</option>
                                            <option v-for="year in schoolYears" :value="year.year">{{ year.year }}</option>
                                        </select>
                                        <small v-if="errors.has('endYear')" class="text-danger">{{ errors.first('endYear') }}</small>
                                    </div>
                                </div>

                                <button class="btn btn-primary" :disabled="errors.any() || !isFormDirty" type="submit">Save Credential</button>
                                <button class="btn btn-outline-secondary" 
                                        
                                        v-on:click="cancel"
                                        v-if="isFormDirty"
                                        type="button">Cancel</button>
                            </form>
                        </div>
                    </div>
                </div>

                <div class="col-6">

                    <div class="card border-secondary mb-3"
                         v-bind:class="{'border-danger':errors.any()}"
                         v-if="credential">
                        <div class="card-header">Assigned Programs</div>
                        <div class="card-body text-secondary">

                            <div v-if="programs.length === 0">
                                No programs assigned
                            </div>

                            <ul class="list-group" v-if="programs.length > 0">
                                <li class="list-group-item" v-for="program in programs">
                                    <div class="text-muted">Cluster: {{ program.clusterName}}</div>
                                    <div class="font-weight-bolder">
                                        <span>
                                            <a v-bind:href="'/careertech/programs/'+ program.programCode">
                                                {{ program.programName }} ({{ program.programCode }})
                                            </a>
                                        </span>
                                    </div>
                                </li>
                            </ul>

                        </div>

                    </div>

                </div>

            </div>



        </div>


        <div class="card-footer text-muted">
            <a v-bind:href="'/careertech/programs/'"><i class="fa fa-arrow-circle-o-left"></i> Back To Programs</a>
        </div>
    </div>
</div>


        @section scripts{
            <script>
        var careerTechUrl = '/api/careertech/';
        var courseUrl = '/api/courses/';
        var refUrl = '/api/ref/';
        var urlParam = '@Model' ? '@Model' : null;

        Vue.use(VeeValidate,
            {
                classes: true,
                classNames: {
                    valid: 'is-valid',
                    invalid: 'is-invalid'
                }
            });

        var app = new Vue({
            el: '#app',
            data: {
                urlParam: null,
                selectedCredential: null,
                credential: null,
                cachedCredential: null,
                credentials: [],
                schoolYears: [],
                credentialTypes: [],
                programs: [],
            },
            methods: {
                submit: function(e) {
                    axios.put(careerTechUrl + 'credentials', this.credential)
                        .then(resp => {
                            var e = this.credentials.find(x => x.id === resp.data.id);
                            this.selectedCredential.name = resp.data.name;
                            this.selectedCredential.credentialCode = resp.data.credentialCode;
                        });
                },

                onChange: function(e) {
                    this.getCredential(this.selectedCredential.credentialCode);
                },

                getCredential: function(credentialCode) {
                    var url = careerTechUrl + 'credentials/' + credentialCode;

                    this.credential = {};

                    axios.get(url + '/edit').then(resp => {
                        this.credential = resp.data;

                        this.$validator.reset();
                        this.cachedCredential = Object.assign({}, resp.data);
                    }).then(resp => {
                        axios.get(url + '/programs').then(resp => {
                            this.programs = resp.data;
                        }).catch(err => console.log(err));

                    }).catch(err => console.log(err));
                }, 

                cancel: function() {
                    this.credential = Object.assign({}, this.cachedCredential);
                    this.$validator.reset();
                },

            },
            computed: {
                isFormDirty() {
                    return Object.keys(this.fields).some(key => this.fields[key].dirty);
                }
            },
            created() {
                this.urlParam = urlParam;

                axios.get(refUrl + 'credentials').then(resp => {
                    this.credentials = resp.data;
                }).then(() => {
                    if (urlParam !== null) {
                        this.selectedCredential = this.credentials.find(x => x.credentialCode === urlParam);
                        this.getCredential(urlParam);
                    }
                }).catch(err => console.log(err));

                axios.get(refUrl + 'schoolyears').then(resp => {
                    this.schoolYears = resp.data;
                }).catch(err => console.log(err));

                axios.get(refUrl + 'credentialTypes').then(resp => {
                    this.credentialTypes = resp.data;
                }).catch(err => console.log(err));

                this.$validator.extend('greaterThan', (value, otherValue) => {
                    return value >= otherValue;
                }, {
                    hasTarget: true
                });

            },
            mounted() {

            }
        });
            </script>
        }

