@model string
@{
    ViewBag.Title = "Credentials";
}

<style>
    [v-cloak] {
        display: none;
    }
</style>

@Html.Partial("_CareerTechNav")

<div id="app" v-cloak>

    <div class="card">
        <div class="card-header">
            <span class="card-title font-weight-bolder">Career Tech Credentials</span>
        </div>
        <div class="card-body">
            <div class="row">

                <div class="col-12">
                    <fieldset class="border p-2">
                        <legend class="w-auto">
                            <small>Select Credential</small>
                        </legend>
                        <div class="form-group row">
                            <div class="col-md-6">
                                <select class="form-control"
                                        v-model="selectedCredential"
                                        v-on:change="onChange($event)"
                                        name="selectedCredential" id="selectedCredential">
                                    <option :value="null">-- Select Credential --</option>
                                    <option v-for="item in credentials" :value="item">{{ item.name }} ({{ item.credentialCode }})</option>
                                </select>
                                
                            </div>
                        </div>
                    </fieldset>
                </div>

                <div class="col-6">
                    <fieldset class="border p-2">
                        <legend class="w-auto">
                            Details
                        </legend>
                        <div v-if="!credential">
                            <span v-if="urlParam">
                                Credential not found.
                            </span>

                            <h3>Select a credential to edit</h3>


                        </div>

                        <form novalidate v-on:submit.prevent="submit()" v-if="credential">

                            <div class="form-group row">
                                <label for="credentialCode" class="col-3 col-form-label">Credential Code</label>
                                <div class="col-9">
                                    <input type="text"
                                           class="form-control"
                                           id="credentialCode"
                                           name="credentialCode"
                                           placeholder="Credential Code (required)"
                                           v-model.trim="credential.credentialCode"
                                           v-validate.continues="'required|min:4|max:4'"
                                           data-vv-as="Credential Code" />
                                    <small v-if="errors.has('credentialCode')" class="text-danger">{{ errors.first('credentialCode') }}</small>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="credentialName" class="col-3 col-form-label">Name</label>
                                <div class="col-9">
                                    <input type="text"
                                           class="form-control"
                                           id="credentialName"
                                           name="credentialName"
                                           placeholder="Credential Name (required)"
                                           v-model.trim="credential.name"
                                           v-validate.continues="'required|max:200'"
                                           data-vv-as="Credential Name" />
                                    <small v-if="errors.has('credentialName')" class="text-danger">{{ errors.first('credentialName') }}</small>
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="credentialTypeId" class="col-3 col-form-label">Credential Type</label>
                                <div class="col-9">
                                    <select class="form-control"
                                            v-model="credential.credentialTypeId"
                                            name="credentialTypeId"
                                            id="credentialTypeId"
                                            v-validate="'required'"
                                            data-vv-as="Credential Type">
                                        <option :value="null">-- Select Credential Type --</option>
                                        <option v-for="type in credentialTypes" :value="type.id">{{ type.name }}</option>
                                    </select>
                                    <small v-if="errors.has('credentialTypeId')" class="text-danger">{{ errors.first('credentialTypeId') }}</small>
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="beginYear" class="col-3 col-form-label">Begin Year</label>
                                <div class="col-9">
                                    <select class="form-control"
                                            v-model="credential.beginYear"
                                            name="beginYear"
                                            id="beginYear"
                                            v-validate="'required'"
                                            data-vv-as="Begin Year"
                                            ref="beginYear">
                                        <option :value="null">-- Select Year --</option>
                                        <option v-for="year in schoolYears" :value="year.year">{{ year.year }}</option>
                                    </select>
                                    <small v-if="errors.has('beginYear')" class="text-danger">{{ errors.first('beginYear') }}</small>
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="endYear" class="col-3 col-form-label">End Year</label>
                                <div class="col-9">
                                    <select class="form-control"
                                            v-model="credential.endYear"
                                            name="endYear"
                                            id="endYear"
                                            v-validate="'greaterThan:beginYear'"
                                            data-vv-as="End Year">
                                        <option :value="null">-- Select Year --</option>
                                        <option v-for="year in schoolYears" :value="year.year">{{ year.year }}</option>
                                    </select>
                                    <small v-if="errors.has('endYear')" class="text-danger">{{ errors.first('endYear') }}</small>
                                </div>
                            </div>

                            <button class="btn btn-primary" :disabled="errors.any() || !isFormDirty" type="submit">Save Credential</button>
                        </form>
                    </fieldset>
                </div>
                
                <div class="col-6">
                    <fieldset v-if="credential" class="border p-2">
                        <legend class="w-auto">
                            Assigned Programs
                        </legend>
                        <div class="row">
                            <div class="col-12">
                                <p>

                                    <div v-if="programs.length === 0">
                                        No programs assigned
                                    </div>

                                    <ul class="list-group" v-if="programs.length > 0">
                                        <li class="list-group-item" v-for="program in programs">
                                            <div class="text-muted">Cluster: {{ program.clusterName}}</div>
                                            <div class="font-weight-bolder">
                                                <span>
                                                    <a v-bind:href="'/careertech/programs/'+ program.programCode">
                                                        {{ program.programName }} ({{ program.programCode }})
                                                    </a>
                                                </span>
                                            </div>
                                        </li>
                                    </ul>
                                </p>
                            </div>
                        </div>
                    </fieldset>
                </div>

                </div>
       
    </div>

    <div class="row">
        


      

    </div>

</div>


@section scripts{
    <script>
        var careerTechUrl = '/api/careertech/';
        var courseUrl = '/api/courses/';
        var refUrl = '/api/ref/';
        var urlParam = '@Model' ? '@Model' : null;

        Vue.use(VeeValidate,
            {
                classes: true,
                classNames: {
                    valid: 'is-valid',
                    invalid: 'is-invalid'
                }
            });

        var app = new Vue({
            el: '#app',
            data: {
                selectedCredential: null,
                credential: null,
                credentials: [],
                schoolYears: [],
                credentialTypes: [],
                programs: [],
                urlParam: null
            },
            methods: {
                submit: function(e) {
                    axios.put(careerTechUrl + 'credentials', this.credential)
                        .then(resp => {
                            var e = this.credentials.find(x => x.id === resp.data.id);
                            this.selectedCredential.name = resp.data.name;
                            this.selectedCredential.credentialCode = resp.data.credentialCode;
                        });
                },

                onChange: function(e) {
                    this.getCredential(this.selectedCredential.credentialCode);
                },

                getCredential: function(credentialCode) {
                    var url = careerTechUrl + 'credentials/' + credentialCode;

                    axios.get(url + '/edit').then(resp => {
                        this.credential = resp.data;
                    }).then(resp => {
                        axios.get(url + '/programs').then(resp => {
                            this.programs = resp.data;
                        }).catch(err => console.log(err));

                    }).catch(err => console.log(err));
                }
            },
            computed: {
                isFormDirty() {
                    return Object.keys(this.fields).some(key => this.fields[key].dirty);
                }
            },
            created() {

                this.urlParam = urlParam;

                axios.get(refUrl + 'credentials').then(resp => {
                    this.credentials = resp.data;
                }).then(() => {
                    if (urlParam !== null) {
                        this.selectedCredential = this.credentials.find(x => x.credentialCode === urlParam);
                        this.getCredential(urlParam);
                    }
                }).catch(err => console.log(err));

                axios.get(refUrl + 'schoolyears').then(resp => {
                    this.schoolYears = resp.data;
                }).catch(err => console.log(err));

                axios.get(refUrl + 'credentialTypes').then(resp => {
                    this.credentialTypes = resp.data;
                }).catch(err => console.log(err));

                this.$validator.extend('greaterThan', (value, otherValue) => {
                    return value >= otherValue;
                }, {
                    hasTarget: true
                });

            },
            mounted() {

            }
        });
    </script>
}

