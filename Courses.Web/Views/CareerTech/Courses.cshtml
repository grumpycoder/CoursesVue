
@{
    ViewBag.Title = "Courses";
}

<style>
    [v-cloak] {
        display: none;
    }
</style>

@Html.Partial("_CareerTechNav")

<div id="app" v-cloak>

    <div class="row">
        <div class="col-6">

            <fieldset>
                <legend>Courses</legend>

                <div class="form-group row">
                    <label for="selectedCourseCode" class="col-md-2 col-form-label">Courses</label>
                    <div class="col-md-8">
                        <select class="form-control"
                                v-model="course"
                                name="course"
                                id="course"
                                v-on:change="onChange($event)">
                            <option :value="null">-- Select Course --</option>
                            <option v-for="item in courses" :value="item">{{ item.courseCode }} ({{ item.name }})</option>
                        </select>
                    </div>
                </div>

                <div v-if="!course">
                    <h4>Select a course to edit</h4>
                </div>

            </fieldset>

        </div>
    </div>
    <div class="row">

        <div class="col-6">
            <fieldset v-if="course">
                <legend>
                    Assigned Programs
                </legend>
                <div class="row">

                    <div class="col-12">
                        <p>
                            <div class="input-group mb-3">
                                <select class="form-control"
                                        v-model="selectedProgram"
                                        name="selectedProgram"
                                        id="selectedProgram">
                                    <option :value="null">-- Select Program --</option>
                                    <option v-for="item in programs" :value="item">{{ item.programName }} ({{ item.programCode }})</option>
                                </select>
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" id="button-addon2" v-on:click="addProgram">Add Program</button>
                                </div>
                            </div>

                            <div v-if="coursePrograms.length === 0">
                                No courses assigned
                            </div>

                            <ul class="list-group" v-if="coursePrograms.length > 0">
                                <li class="list-group-item" v-for="item in coursePrograms">
                                    <div class="row">
                                        <div class="col-9">
                                         
                                            <div class="font-weight-bolder">
                                                <span>
                                                    <a v-bind:href="'/careertech/programs/'+ item.programCode">
                                                        {{ item.programName }} ({{ item.programCode }})
                                                    </a>
                                                </span>
                                            </div>

                                        </div>
                                        <div class="col-3">
                                            <button class="btn btn-danger btn-sm float-right" v-on:click="removeProgram(item)">Delete</button>

                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </p>
                    </div>
                </div>
            </fieldset>
        </div>


    </div>

</div>


@section scripts{
    <script type="text/javascript">
        var careerTechUrl = '/api/careertech/';
        var courseUrl = '/api/courses/';
        var refUrl = '/api/ref/';
        var urlParam = '@Model' ? '@Model' : nul

        var app = new Vue({
            el: '#app',
            data: {
                course: null,
                selectedProgram: null,
                courses: [],
                programs: [],
                coursePrograms: [],
            },
            methods: {
                onChange: function(e) {
                    var url = careerTechUrl + 'courses/' + this.course.courseCode + '/programs';
                    axios.get(url).then(resp => {
                        this.coursePrograms = resp.data;
                    }).catch(err => console.log(err));

                },
                removeProgram: function(program) {
                    var url = careerTechUrl + 'programs/' + program.programCode + '/course/' + this.course.courseCode;
                    var idx = this.coursePrograms.indexOf(program);
                    axios.delete(url)
                        .then(resp => {
                            this.coursePrograms.splice(idx, 1);

                        });
                },

                addProgram: function() {
                    var url = careerTechUrl +
                        'programs/' +
                        this.selectedProgram.programCode +
                        '/course/' +
                        this.course.courseCode;
                    axios.post(url)
                        .then(resp => {
                            this.coursePrograms.push(this.selectedProgram);
                        });
                },

                getPrograms(courseCode) {
                    var url = careerTechUrl + 'courses/' + courseCode + '/programs';
                    axios.get(url).then(resp => {
                        this.coursePrograms = resp.data;
                    }).catch(err => console.log(err));
                }

            },
            created() {
                var courseOptions = '?loadOptions.filter=isActive%3Dtrue&loadOptions.remoteSelect=true';

                axios.get(courseUrl + courseOptions).then(resp => {
                    this.courses = resp.data.data;
                }).then(() => {
                    if (urlParam !== null) {
                        this.course = this.courses.find(x => x.courseCode === urlParam);
                        this.getPrograms(urlParam);
                    }
                }).catch(err => console.log(err));

                axios.get(refUrl + 'programs').then(resp => {
                    this.programs = resp.data;
                }).catch(err => console.log(err));

            },
            mounted() {
            }
        });
    </script>
}
